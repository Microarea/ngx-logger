{"version":3,"sources":["ng://@tb/logger/lib/models/entries.model.ts","ng://@tb/logger/lib/models/operation-result.model.ts","ng://@tb/logger/lib/models/logger-operation-result.model.ts","ng://@tb/logger/lib/models/log.model.ts","ng://@tb/logger/lib/models/log-status.enum.ts","null","ng://@tb/logger/lib/services/tb-logger.service.ts","ng://@tb/logger/lib/components/logger-viewer/logger-viewer.component.ts","ng://@tb/logger/lib/services/notification.service.ts","ng://@tb/logger/lib/components/rabbit-viewer/rabbit-viewer.component.ts","ng://@tb/logger/lib/tb-logger.module.ts"],"names":["EntriesParams","OperationResult","LoggerOperationResult","Log","Info","Debug","Warn","Error","Fatal","__read","o","n","m","Symbol","iterator","r","e","i","call","ar","next","done","push","value","error","__spread","arguments","length","concat","TbLoggerService","env","http","stompService","this","StompState","CLOSED","BehaviorSubject","mqInit","prototype","_this","config","stompConfig","initAndConnect","state","subscribe","status","mqConnectionState","mqConnectionStateObservable","getLoggerUrl","loggerUrl","logger","url","log","message","optionalParams","_i","console","apply","debug","warn","getLogs","params","appId","Result","Message","of","p","HttpParams","append","howMany","apps","appTypes","httpOptions","get","pipe","tap","op","catchError","handleError","getApps","getAppTypes","operation","result","mqConnect","queueName","map","msg","JSON","parse","body","mqConnected","connected","mqDisconnect","disconnect","Injectable","args","providedIn","Inject","HttpClient","StompRService","LoggerViewerComponent","loggerService","localStorage","getItem","LogStatus","ngOnInit","appListInit","ngAfterViewInit","appData","Content","appList","loading","appTypeData","appTypeList","appIdInput","nativeElement","focus","app","appType","logs","setLoggerUrl","event","setItem","setApp","$event","setAppId","setAppType","close","clearInterval","autoRefreshInterval","checkAutoRefresh","autoRefresh","setInterval","Component","selector","template","styles","ViewChild","TbNotificationService","notificationService","show","style","content","animation","type","duration","position","horizontal","vertical","icon","hideAfter","NotificationService","RabbitViewerComponent","mqConnectionStateSubscription","onChangeMqState","CONNECTED","mqQueueName","mqSubscribe","mqQueue","onMessage","mqMessages","UPContent","Level","UPMessage","TbLoggerModule","forRoot","ngModule","providers","NgModule","imports","CommonModule","NotificationModule","ButtonsModule","InputsModule","DateInputsModule","FormsModule","DropDownsModule","declarations","exports"],"mappings":"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","sourcesContent":["export class EntriesParams {\r\n    appId: string;\r\n    apps: string;\r\n    appTypes: string;\r\n    categories: string;\r\n    howMany: string;\r\n    offSet: string;\r\n    levels: string;\r\n    textToFind: string;\r\n    useHistory: string;\r\n\r\n    constructor() {}\r\n}\r\n","export class OperationResult {\r\n    Result: boolean;\r\n    Message?: string;\r\n    Code?: number;\r\n    Content?: any;\r\n\r\n    constructor() {}\r\n}\r\n","export class LoggerOperationResult {\r\n    Result: boolean;\r\n    Message?: string;\r\n    Code?: number;\r\n    Content?: any;\r\n\r\n    constructor() {}\r\n}\r\n","export class Log {\r\n    _id: string;\r\n    LogEntry: {\r\n        App: string; // ERP, PAI, MDC, TBF\r\n        RegisteredAppId: string; // instance key\r\n        RegisteredAppType: string; // TBLOADER, NETCORE, NG, PROVISIONING\r\n        Category: string; //\r\n        Module: string;\r\n        SubModule: string;\r\n        Document: string;\r\n        Subscription: string;\r\n        AccountName: string;\r\n        Lifetime: string;\r\n        Operation: string;\r\n        ContextDescription: string;\r\n        Method: string;\r\n        EntryCreated: string;\r\n        Message: string;\r\n        Level: number;\r\n    };\r\n\r\n    constructor() {}\r\n}\r\n","export enum LogStatus {\r\n    Info = 0,\r\n    Debug = 1,\r\n    Warn = 2,\r\n    Error = 3,\r\n    Fatal = 4\r\n}\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Injectable, Inject } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\n\r\nimport { EntriesParams } from '../models/entries.model';\r\nimport { LoggerOperationResult } from '../models/logger-operation-result.model';\r\nimport { catchError, tap, map } from 'rxjs/operators';\r\nimport { Observable, of, BehaviorSubject } from 'rxjs';\r\nimport { StompRService, StompConfig, StompState } from '@stomp/ng2-stompjs';\r\nimport { Message } from '@stomp/stompjs';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class TbLoggerService {\r\n    public loggerUrl: string;\r\n    private howMany = 100;\r\n\r\n    public mqConnectionState: StompState = StompState.CLOSED;\r\n    public mqConnectionStateObservable: BehaviorSubject<StompState> = new BehaviorSubject(StompState.CLOSED);\r\n\r\n    constructor(@Inject('env') private env, private http: HttpClient, public stompService: StompRService) {\r\n        this.mqInit();\r\n    }\r\n\r\n    mqInit() {\r\n        this.stompService.config = this.env.stompConfig;\r\n        this.stompService.initAndConnect();\r\n        this.stompService.state.subscribe((status: StompState) => {\r\n            this.mqConnectionState = status;\r\n            this.mqConnectionStateObservable.next(status);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Ritorna la base url del logger,\r\n     * caricata da un file di configurazione caricato dinamicamente (assets/environment.json)\r\n     */\r\n    getLoggerUrl() {\r\n        return this.loggerUrl ? this.loggerUrl : this.env.logger.url;\r\n    }\r\n\r\n    /**\r\n     * Console.log in attesa di post to logger\r\n     *\r\n     * @param message\r\n     * @param optionalParams\r\n     */\r\n    log(message?: any, ...optionalParams: any[]): void {\r\n        console.log(message, ...optionalParams);\r\n    }\r\n\r\n    /**\r\n     * Console.log in attesa di post to logger\r\n     *\r\n     * @param message\r\n     * @param optionalParams\r\n     */\r\n    debug(message?: any, ...optionalParams: any[]): void {\r\n        console.log(message, ...optionalParams);\r\n    }\r\n\r\n    /**\r\n     * Console.warn in attesa di post to logger\r\n     *\r\n     * @param message\r\n     * @param optionalParams\r\n     */\r\n    warn(message?: any, ...optionalParams: any[]): void {\r\n        console.warn(message, ...optionalParams);\r\n    }\r\n\r\n    /**\r\n     * Console.error in attesa di post to logger\r\n     *\r\n     * @param message\r\n     * @param optionalParams\r\n     */\r\n    error(message?: any, ...optionalParams: any[]): void {\r\n        console.error(message, ...optionalParams);\r\n    }\r\n\r\n    /**\r\n     * Return logs: LoggerOperationResult\r\n     *\r\n     * @param params: EntriesParams\r\n     */\r\n    public getLogs(params: EntriesParams): Observable<boolean | LoggerOperationResult> {\r\n        if (!params.appId) {\r\n            const error = new LoggerOperationResult();\r\n            error.Result = false;\r\n            error.Message = 'Error - No appId, no party';\r\n            return of(error);\r\n        }\r\n\r\n        const url = this.getLoggerUrl() + `entries/${params.appId}`;\r\n\r\n        let p = new HttpParams();\r\n        p = p.append('howMany', '' + this.howMany);\r\n        if (params.apps) p = p.append('apps', params.apps);\r\n        if (params.appTypes) p = p.append('appTypes', params.appTypes);\r\n\r\n        const httpOptions = {\r\n            params: p\r\n        };\r\n\r\n        return this.http.get<LoggerOperationResult>(url, httpOptions).pipe(\r\n            tap(op => console.log('TbLoggerService.getLogs', op)),\r\n            catchError(this.handleError('TbLoggerService.getLogs', false))\r\n        );\r\n    }\r\n\r\n    public getApps(appId: string): Observable<boolean | LoggerOperationResult> {\r\n        if (!appId) {\r\n            const error = new LoggerOperationResult();\r\n            error.Result = false;\r\n            error.Message = 'Error - No appId, no party';\r\n            return of(error);\r\n        }\r\n\r\n        const url = this.getLoggerUrl() + `apps/${appId}`;\r\n\r\n        return this.http.get<LoggerOperationResult>(url).pipe(\r\n            tap(op => console.log('TbLoggerService.getApps with appId: ', appId, op)),\r\n            catchError(this.handleError('TbLoggerService.getApps', false))\r\n        );\r\n    }\r\n\r\n    public getAppTypes(appId: string): Observable<boolean | LoggerOperationResult> {\r\n        if (!appId) {\r\n            const error = new LoggerOperationResult();\r\n            error.Result = false;\r\n            error.Message = 'Error - No appId, no party';\r\n            return of(error);\r\n        }\r\n\r\n        const url = this.getLoggerUrl() + `appTypes/${appId}`;\r\n\r\n        return this.http.get<LoggerOperationResult>(url).pipe(\r\n            tap(op => console.log('TbLoggerService.getAppTypes with appId: ', appId, op)),\r\n            catchError(this.handleError('TbLoggerService.getAppTypes', false))\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Handle Http operation that failed.\r\n     * Let the app continue.\r\n     * @param operation - name of the operation that failed\r\n     * @param result - optional value to return as the observable result\r\n     */\r\n    public handleError<T>(operation = 'operation', result?: T) {\r\n        return (error: any): Observable<T> => {\r\n            console.error(`${operation} failed: ${error.message}`);\r\n\r\n            // Let the app keep running by returning an empty result.\r\n            return of(result as T);\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Connessione a RabbitMQ\r\n     */\r\n    public mqConnect(queueName: string) {\r\n        return this.stompService.subscribe(queueName).pipe(map((msg: Message) => JSON.parse(msg.body)));\r\n    }\r\n\r\n    public mqConnected() {\r\n        return this.stompService.connected();\r\n    }\r\n    public mqDisconnect() {\r\n        return this.stompService.disconnect();\r\n    }\r\n}\r\n","import { Component, OnInit, ViewChild, AfterViewInit } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport { Log } from './../../models/log.model';\r\nimport { LogStatus } from './../../models/log-status.enum';\r\nimport { TbLoggerService } from './../../services/tb-logger.service';\r\nimport { LoggerOperationResult } from './../../models/logger-operation-result.model';\r\n\r\nimport { delay, switchMap, tap } from 'rxjs/operators';\r\nimport { EntriesParams } from '../../models/entries.model';\r\n\r\n@Component({\r\n    selector: 'tb-logger-viewer',\r\n    template: `<div class=\"header\">\r\n    <div class=\"row\">\r\n        <label id=\"logger-url-label\" class=\"h-label\" for=\"logger-url\">Logger URL:</label>\r\n        <input kendoTextBox id=\"logger-url\" [(ngModel)]=\"loggerUrl\" (blur)=\"setLoggerUrl($event)\" (click)=\"$event.target.select()\" />\r\n        <span class=\"k-icon k-i-reset \" (click)=\"getLogs()\"></span>\r\n\r\n        <div class=\"autorefresh\">\r\n            <input type=\"checkbox\" id=\"autoRefresh\" class=\"k-checkbox\" [ngModel]=\"checked\" (ngModelChange)=\"checkAutoRefresh($event)\">\r\n            <label class=\"k-checkbox-label\" for=\"autoRefresh\">Auto refresh (5s)</label>\r\n        </div>\r\n    </div>\r\n    <div class=\"row\">\r\n\r\n        <div class=\"filter\">\r\n            <!-- APP ID -->\r\n            <label id=\"logger-app-id-label\" class=\"h-label\" for=\"logger-app-id\" (click)=\"appListInit()\">Instance Key:</label>\r\n            <input kendoTextBox #appIdInput [(ngModel)]=\"appId\" (blur)=\"setAppId($event)\" id=\"ka-app-id\" (click)=\"$event.target.select()\"\r\n                placeholder=\"e.g. 2d136c61-aac2-442d-926c-a531c3685035\" />\r\n        </div>\r\n\r\n        <div class=\"filter\">\r\n            <!-- APP -->\r\n            <label id=\"logger-app-label\" class=\"h-label\" for=\"logger-app\">App:</label>\r\n            <kendo-autocomplete #appList [data]=\"appData\" [suggest]=\"true\" [placeholder]=\"'e.g. ERP, MDC, TBF'\"\r\n                [(ngModel)]=\"app\" (valueChange)=\"setApp($event)\" id=\"ka-app\">\r\n            </kendo-autocomplete>\r\n        </div>\r\n\r\n        <div class=\"filter\">\r\n            <!-- APP TYPE -->\r\n            <label id=\"logger-app-type-label\" class=\"h-label\" for=\"logger-app-type\">AppType:</label>\r\n            <kendo-autocomplete #appTypeList [data]=\"appTypeData\" [suggest]=\"true\" [placeholder]=\"'e.g. TBLOADER, NETCORE, NG'\"\r\n                [(ngModel)]=\"appType\" (valueChange)=\"setAppType($event)\" id=\"ka-app-type\">\r\n            </kendo-autocomplete>\r\n        </div>\r\n\r\n    </div>\r\n    <div class=\"notify\" *ngIf=\"message\">\r\n        <p>{{message}}</p>\r\n    </div>\r\n</div>\r\n\r\n<div class=\"monitor\">\r\n\r\n    <div class=\"loading\" *ngIf=\"loading\">\r\n        <span class=\"k-icon k-i-loading\"></span>\r\n    </div>\r\n\r\n    <ul class=\"logs\" *ngIf=\"!loading\">\r\n        <li *ngIf=\"logs.length == 0\" class=\"no-logs\">No Logs with appId:<strong>{{appId}}</strong></li>\r\n        <li *ngFor=\"let log of logs\" class=\"log\">\r\n            <span class=\"l-date\">{{log.LogEntry.EntryCreated | date: 'medium' }} </span> -\r\n            <span class=\"l-account-name\"> {{log.LogEntry.AccountName }} </span> -\r\n            <span class=\"l-app\" *ngIf=\"log.LogEntry.App\"> {{log.LogEntry.App }} -</span>\r\n            <span class=\"l-type\" *ngIf=\"log.LogEntry.RegisteredAppType\"> {{log.LogEntry.RegisteredAppType }} -</span>\r\n            <span class=\"l-category\" *ngIf=\"log.LogEntry.Category\"> {{log.LogEntry.Category }} -</span>\r\n            <span class=\"l-status level-{{log.LogEntry.Level}}\">[{{logStatus[log.LogEntry.Level]}}]</span>\r\n            <span class=\"l-msg\"> {{log.LogEntry.Message}} </span>\r\n        </li>\r\n    </ul>\r\n</div>`,\r\n    styles: [`:host(tb-logger-viewer){flex:1;display:flex;flex-direction:column}:host(tb-logger-viewer) .notify{background:#ff0b0b;padding:5px 10px;margin:10px 0;color:#fff}:host(tb-logger-viewer) .notify p{margin:5px 0;font-size:12px}:host(tb-logger-viewer) .header{display:flex;flex-direction:column;margin:30px 0 10px}:host(tb-logger-viewer) .header .row{display:flex;flex-direction:row;align-items:center;margin:5px 0}:host(tb-logger-viewer) .header .row.flex-center{justify-content:center}:host(tb-logger-viewer) .header .row.flex-around{justify-content:space-around}:host(tb-logger-viewer) .header .row.flex-between{justify-content:space-between}:host(tb-logger-viewer) .header .row .filter #ka-app-id{width:330px}:host(tb-logger-viewer) .header label.h-label{font-weight:500;font-size:14px;margin:0 10px}:host(tb-logger-viewer) .header #logger-url{width:500px}:host(tb-logger-viewer) .header .k-checkbox-label{font-size:12px}:host(tb-logger-viewer) .monitor{display:flex;flex:1;background:#f1f1f1;border:1px solid #ccc;padding:0;margin:5px 0}:host(tb-logger-viewer) .monitor .loading{display:flex;justify-content:center;align-items:center;flex:1}:host(tb-logger-viewer) .monitor .loading .k-i-loading{font-size:34px;color:#999}:host(tb-logger-viewer) .k-i-reset{margin-right:10px;color:#0277bd;border:none;padding:5px}:host(tb-logger-viewer) .k-i-reset:hover{cursor:pointer;color:#222}:host(tb-logger-viewer) hr{background:#0277bd;height:1px;border:none}:host(tb-logger-viewer) .logs{margin:0;padding:5px;list-style:none;overflow:auto;flex:1}:host(tb-logger-viewer) .logs .no-logs{font-size:12px}:host(tb-logger-viewer) .logs .no-logs strong{font-weight:500}:host(tb-logger-viewer) .logs .log{font-size:12px;margin:3px 0}:host(tb-logger-viewer) .logs .log .l-date{color:#999}:host(tb-logger-viewer) .logs .log .l-account-name{color:#00f}:host(tb-logger-viewer) .logs .log .l-status{text-transform:uppercase;margin:0 3px}:host(tb-logger-viewer) .logs .log .l-status.level-0{color:#000}:host(tb-logger-viewer) .logs .log .l-status.level-1{color:#00f}:host(tb-logger-viewer) .logs .log .l-status.level-2{color:orange}:host(tb-logger-viewer) .logs .log .l-status.level-3{color:red}:host(tb-logger-viewer) .logs .log .l-status.level-4{color:red}`]\r\n})\r\nexport class LoggerViewerComponent implements OnInit, AfterViewInit {\r\n    // instance key\r\n    @ViewChild('appIdInput')\r\n    appIdInput;\r\n    appId: string = localStorage.getItem('appId') ? localStorage.getItem('appId') : '';\r\n\r\n    // app\r\n    @ViewChild('appList')\r\n    appList;\r\n    public appData: Array<string> = [];\r\n    app: string = localStorage.getItem('app') ? localStorage.getItem('app') : '';\r\n\r\n    // app types\r\n    @ViewChild('appTypeList')\r\n    appTypeList;\r\n    public appTypeData: Array<string> = [];\r\n    appType: string = localStorage.getItem('appType') ? localStorage.getItem('appType') : '';\r\n\r\n    logs: Log[] = [];\r\n    logStatus = LogStatus;\r\n    show = false;\r\n    loading = false;\r\n    howMany = 100;\r\n    checked = false;\r\n    autoRefresh = false;\r\n    autoRefreshInterval: any;\r\n    message = '';\r\n\r\n    loggerUrl = localStorage.getItem('loggerUrl') ? localStorage.getItem('loggerUrl') : this.loggerService.getLoggerUrl();\r\n\r\n    constructor(public loggerService: TbLoggerService) {}\r\n\r\n    ngOnInit() {\r\n        this.appListInit();\r\n        this.getLogs();\r\n    }\r\n\r\n    ngAfterViewInit() {}\r\n\r\n    // leggo tutte le app, gli appId e gli appType e li salvo in rispettivi array\r\n    // verranno poi filtrati dai componenti kendo\r\n    appListInit() {\r\n        if (!this.appId) return false;\r\n        this.loggerService.getApps(this.appId).subscribe((op: LoggerOperationResult) => {\r\n            this.appData = op.Content;\r\n            this.appList.loading = false;\r\n        });\r\n        this.loggerService.getAppTypes(this.appId).subscribe((op: LoggerOperationResult) => {\r\n            this.appTypeData = op.Content;\r\n            this.appTypeList.loading = false;\r\n        });\r\n    }\r\n\r\n    public getLogs() {\r\n        if (!this.appId) {\r\n            this.message = 'Instance Key mancante';\r\n            this.appIdInput.nativeElement.focus();\r\n            return;\r\n        }\r\n\r\n        this.loading = true;\r\n\r\n        const params = new EntriesParams();\r\n        params.appId = this.appId;\r\n        if (this.app) params.apps = this.app;\r\n        if (this.appType) params.appTypes = this.appType;\r\n\r\n        this.loggerService.getLogs(params).subscribe((op: LoggerOperationResult) => {\r\n            if (!op.Result) {\r\n                this.message = op.Message;\r\n                this.logs = [];\r\n                this.loading = false;\r\n                return false;\r\n            }\r\n\r\n            this.message = '';\r\n            this.logs = op.Content;\r\n\r\n            this.loading = false;\r\n        });\r\n    }\r\n\r\n    public setLoggerUrl(event) {\r\n        localStorage.setItem('loggerUrl', this.loggerUrl);\r\n        this.getLogs();\r\n    }\r\n\r\n    public setApp($event) {\r\n        localStorage.setItem('app', this.app);\r\n        this.getLogs();\r\n    }\r\n\r\n    public setAppId($event) {\r\n        localStorage.setItem('appId', this.appId);\r\n        this.getLogs();\r\n    }\r\n\r\n    public setAppType($event) {\r\n        localStorage.setItem('appType', this.appType);\r\n        this.getLogs();\r\n    }\r\n\r\n    public close() {\r\n        clearInterval(this.autoRefreshInterval);\r\n    }\r\n\r\n    public checkAutoRefresh(event: any) {\r\n        this.autoRefresh = !this.autoRefresh;\r\n        if (this.autoRefresh) {\r\n            this.getLogs();\r\n            this.autoRefreshInterval = setInterval(() => {\r\n                this.getLogs();\r\n            }, 5000);\r\n        } else {\r\n            if (this.autoRefreshInterval) {\r\n                clearInterval(this.autoRefreshInterval);\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { Injectable, Inject } from '@angular/core';\r\n\r\nimport { NotificationService } from '@progress/kendo-angular-notification';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class TbNotificationService {\r\n    constructor(private notificationService: NotificationService) {}\r\n\r\n    public show(msg, style: any = 'none'): void {\r\n        this.notificationService.show({\r\n            content: msg,\r\n            animation: { type: 'slide', duration: 200 },\r\n            position: { horizontal: 'right', vertical: 'bottom' },\r\n            type: { style: style, icon: true },\r\n            hideAfter: 4000\r\n        });\r\n    }\r\n}\r\n","import { Component, OnInit, ViewChild, AfterViewInit } from '@angular/core';\r\n\r\nimport { Subscription } from 'rxjs';\r\nimport { StompState } from '@stomp/ng2-stompjs';\r\n\r\nimport { LogStatus } from './../../models/log-status.enum';\r\nimport { TbLoggerService } from './../../services/tb-logger.service';\r\nimport { TbNotificationService } from '../../services/notification.service';\r\n\r\n@Component({\r\n    selector: 'tb-rabbit-viewer',\r\n    template: `<div class=\"header\">\r\n    <div class=\"row\">\r\n        <label id=\"mq-queue-name-label\" class=\"h-label\" for=\"mq-connection-state\">MQ Connection state:</label>\r\n        <p id=\"mq-connection-state\">{{stompState[loggerService.mqConnectionState]}}</p>\r\n    </div>\r\n    <div class=\"row\">\r\n        <label id=\"mq-queue-name-label\" class=\"h-label\" for=\"mq-queue\">Queue Name:</label>\r\n        <input kendoTextBox id=\"mq-queue-name\" [(ngModel)]=\"mqQueueName\" (click)=\"$event.target.select()\" />\r\n        <button kendoButton (click)=\"mqSubscribe()\" [disabled]=\"loggerService.mqConnectionState !== stompState.CONNECTED\">Connect</button>\r\n    </div>\r\n</div>\r\n<div class=\"monitor\">\r\n    <ul class=\"messages\">\r\n        <li *ngIf=\"mqMessages.length == 0\" class=\"no-messages\">No messages in queue:<strong>{{mqQueueName}}</strong></li>\r\n        <li *ngFor=\"let m of mqMessages\" class=\"message\">\r\n            <!-- <span class=\"l-msg\"> {{m.UPMessage}} </span> -->\r\n            <span class=\"l-date\">{{m.UPContent.EntryCreated | date: 'medium' }} </span> -\r\n            <span class=\"l-account-name\"> {{m.UPContent.AccountName }} </span> -\r\n            <span class=\"l-app\" *ngIf=\"m.UPContent.App\"> {{m.UPContent.App }} -</span>\r\n            <span class=\"l-type\" *ngIf=\"m.UPContent.RegisteredAppType\"> {{m.UPContent.RegisteredAppType }} -</span>\r\n            <span class=\"l-category\" *ngIf=\"m.UPContent.Category\"> {{m.UPContent.Category }} -</span>\r\n            <span class=\"l-status level-{{m.UPContent.Level}}\"> [{{logStatus[m.UPContent.Level]}}]</span>\r\n            <span class=\"l-msg\"> {{m.UPContent.Message}} </span>\r\n        </li>\r\n    </ul>\r\n</div>`,\r\n    styles: [`:host(tb-rabbit-viewer){flex:1;display:flex;flex-direction:column}:host(tb-rabbit-viewer) .notify{background:#ff0b0b;padding:5px 10px;margin:10px 0;color:#fff}:host(tb-rabbit-viewer) .notify p{margin:5px 0;font-size:12px}:host(tb-rabbit-viewer) .header{display:flex;flex-direction:column}:host(tb-rabbit-viewer) .header .row{display:flex;flex-direction:row;align-items:center;margin:5px 0}:host(tb-rabbit-viewer) .header .row.flex-center{justify-content:center}:host(tb-rabbit-viewer) .header .row.flex-around{justify-content:space-around}:host(tb-rabbit-viewer) .header .row.flex-between{justify-content:space-between}:host(tb-rabbit-viewer) .header .row #mq-queue-name{width:500px}:host(tb-rabbit-viewer) .header label.h-label{font-weight:500;font-size:14px;margin:0 10px}:host(tb-rabbit-viewer) .header .k-checkbox-label{font-size:12px}:host(tb-rabbit-viewer) .monitor{display:flex;flex:1;background:#f1f1f1;border:1px solid #ccc;padding:0;margin:5px 0}:host(tb-rabbit-viewer) .monitor .loading{display:flex;justify-content:center;align-items:center;flex:1}:host(tb-rabbit-viewer) .monitor .loading .k-i-loading{font-size:34px;color:#999}:host(tb-rabbit-viewer) .k-i-reset{margin-right:10px;color:#0277bd;border:none;padding:5px}:host(tb-rabbit-viewer) .k-i-reset:hover{cursor:pointer;color:#222}:host(tb-rabbit-viewer) hr{background:#0277bd;height:1px;border:none}:host(tb-rabbit-viewer) .messages{margin:0;padding:5px;list-style:none;overflow:auto;flex:1}:host(tb-rabbit-viewer) .messages .no-logs{font-size:12px}:host(tb-rabbit-viewer) .messages .no-logs strong{font-weight:500}:host(tb-rabbit-viewer) .messages .message{font-size:12px;margin:3px 0}:host(tb-rabbit-viewer) .messages .message .l-date{color:#999}:host(tb-rabbit-viewer) .messages .message .l-account-name{color:#00f}:host(tb-rabbit-viewer) .messages .message .l-status{text-transform:uppercase;margin:0 3px}:host(tb-rabbit-viewer) .messages .message .l-status.level-0{color:#000}:host(tb-rabbit-viewer) .messages .message .l-status.level-1{color:#00f}:host(tb-rabbit-viewer) .messages .message .l-status.level-2{color:orange}:host(tb-rabbit-viewer) .messages .message .l-status.level-3{color:red}:host(tb-rabbit-viewer) .messages .message .l-status.level-4{color:red}`]\r\n})\r\nexport class RabbitViewerComponent implements OnInit, AfterViewInit {\r\n    stompState = StompState;\r\n    logStatus = LogStatus;\r\n\r\n    mqConnectionStateSubscription: Subscription;\r\n    mqConnectionState: StompState;\r\n\r\n    mqQueue: Subscription;\r\n    mqQueueName = localStorage.getItem('mqQueueName') ? localStorage.getItem('mqQueueName') : '';\r\n\r\n    public mqMessages: Array<string> = [];\r\n\r\n    constructor(public loggerService: TbLoggerService, private notificationService: TbNotificationService) {}\r\n\r\n    ngOnInit() {\r\n        this.mqConnectionStateSubscription = this.loggerService.mqConnectionStateObservable.subscribe(status =>\r\n            this.onChangeMqState(status)\r\n        );\r\n    }\r\n\r\n    ngAfterViewInit() {}\r\n\r\n    private onChangeMqState(status: StompState) {\r\n        this.mqConnectionState = status;\r\n\r\n        if (status === StompState.CONNECTED && this.mqQueueName) {\r\n            this.mqSubscribe();\r\n        }\r\n    }\r\n\r\n    public mqSubscribe() {\r\n        localStorage.setItem('mqQueueName', this.mqQueueName);\r\n        const queueName = `/queue/${this.mqQueueName}`;\r\n        this.mqQueue = this.loggerService.mqConnect(queueName).subscribe(msg => this.onMessage(msg));\r\n    }\r\n\r\n    private onMessage(msg) {\r\n        console.log('RabbitViewerComponent.onMessage', msg);\r\n\r\n        this.mqMessages.push(msg);\r\n\r\n        let style = 'none';\r\n        if (msg.UPContent) {\r\n            switch (msg.UPContent.Level) {\r\n                case LogStatus.Warn:\r\n                    style = 'warning';\r\n                    break;\r\n                case LogStatus.Error:\r\n                case LogStatus.Fatal:\r\n                    style = 'error';\r\n                    break;\r\n                default:\r\n                    style = 'none';\r\n            }\r\n            this.notificationService.show(msg.UPMessage, style);\r\n        }\r\n    }\r\n}\r\n","import { NgModule, ModuleWithProviders, Inject } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { ButtonsModule } from '@progress/kendo-angular-buttons';\r\nimport { DropDownsModule } from '@progress/kendo-angular-dropdowns';\r\nimport { InputsModule } from '@progress/kendo-angular-inputs';\r\nimport { DateInputsModule } from '@progress/kendo-angular-dateinputs';\r\nimport { NotificationModule } from '@progress/kendo-angular-notification';\r\n\r\nimport { StompRService } from '@stomp/ng2-stompjs';\r\n\r\nimport { LoggerViewerComponent } from './components/logger-viewer/logger-viewer.component';\r\nimport { RabbitViewerComponent } from './components/rabbit-viewer/rabbit-viewer.component';\r\n\r\n@NgModule({\r\n    imports: [CommonModule, NotificationModule, ButtonsModule, InputsModule, DateInputsModule, FormsModule, DropDownsModule],\r\n    declarations: [LoggerViewerComponent, RabbitViewerComponent],\r\n    exports: [LoggerViewerComponent, RabbitViewerComponent],\r\n    providers: [StompRService]\r\n})\r\nexport class TbLoggerModule {\r\n    static forRoot(): ModuleWithProviders {\r\n        return {\r\n            ngModule: TbLoggerModule,\r\n            providers: [StompRService]\r\n        };\r\n    }\r\n}\r\n"]}