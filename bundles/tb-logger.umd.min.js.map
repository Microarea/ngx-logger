{"version":3,"sources":["ng://@tb/logger/lib/models/entries.model.ts","ng://@tb/logger/lib/models/monitor.model.ts","ng://@tb/logger/lib/models/operation-result.model.ts","ng://@tb/logger/lib/models/logger-operation-result.model.ts","ng://@tb/logger/lib/models/log.model.ts","ng://@tb/logger/lib/services/tb-logger.service.ts","ng://@tb/logger/lib/models/log-status.enum.ts","ng://@tb/logger/lib/services/notification.service.ts","ng://@tb/logger/lib/tb-logger.module.ts"],"names":["EntriesParams","MonitorParams","OperationResult","LoggerOperationResult","TBServerInfos","TBServerInfo","Log","loggerInstance","Info","Debug","Warn","Error","Fatal","logger","Trace","prepareLog","message","logLevel","LogLevel","Message","Registeredappid","getAppId","AccountName","localStorage","getItem","Subscription","Category","Level","TbLoggerService","env","http","stompService","_this","this","howMany","mqConnectionState","StompState","CLOSED","mqConnectionStateObservable","BehaviorSubject","_shouldLog","level","_serverLog","post","getLoggerPostUrl","toPromise","stompConfig","mqInit","prototype","config","initAndConnect","state","subscribe","status","next","appId","getLoggerUrl","loggerUrl","url","getServerMonitorUrl","serverMonitorUrl","serverMonitor","log","console","debug","warn","error","stat","getLogs","params","instanceKey","Result","of","p","HttpParams","append","accountName","subscriptionKey","category","apps","appTypes","levels","rangeDateStart","rangeDateEnd","httpOptions","get","pipe","catchError","handleError","getApps","getAppTypes","getInstanceKey","getSubscriptionKey","getCategories","operation","result","mqConnect","queueName","map","msg","JSON","parse","body","mqConnected","connected","mqDisconnect","disconnect","getTBInfosLogs","processName","minutes","Injectable","args","providedIn","Inject","HttpClient","StompRService","TbNotificationService","notificationService","show","style","content","animation","type","duration","position","horizontal","vertical","icon","hideAfter","NotificationService","TbLoggerModule","forRoot","ngModule","providers","NgModule","imports","CommonModule","NotificationModule","ButtonsModule","InputsModule","DateInputsModule","FormsModule","DropDownsModule"],"mappings":"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","sourcesContent":["export class EntriesParams {\r\n    instanceKey: string;\r\n    subscriptionKey: string;\r\n    apps: string;\r\n    appTypes: string;\r\n    category: string;\r\n    howMany: string;\r\n    offSet: string;\r\n    levels: string;\r\n    textToFind: string;\r\n    useHistory: string;\r\n    accountName: string;\r\n    rangeDateStart: string;\r\n    rangeDateEnd: string;\r\n\r\n    constructor() {}\r\n}\r\n","export class MonitorParams {\r\n    accountName: string;\r\n    instanceKey: string;\r\n    processName: string;\r\n    minutes: string;\r\n\r\n    constructor() {}\r\n}\r\n","export class OperationResult {\r\n    Result: boolean;\r\n    Message?: string;\r\n    Code?: number;\r\n    Content?: any;\r\n\r\n    constructor() {}\r\n}\r\n","export class LoggerOperationResult {\r\n    Result: boolean;\r\n    Message?: string;\r\n    Code?: number;\r\n    Content?: any;\r\n\r\n    constructor() {}\r\n}\r\n\r\nexport class TBServerInfos {\r\n    tread: TBServerInfo[];\r\n    constructor() {}\r\n}\r\n\r\nexport class TBServerInfo {\r\n    DateTime: string;\r\n    ProcessName: string;\r\n    LoginNumber?: number;\r\n    DocumentNumber?: number;\r\n\r\n    DocMetrics?: any[];\r\n    LernelMS?: number;\r\n    LoginInfos?: any[];\r\n    PhisicalMemory?: number;\r\n    UserMS?: number;\r\n    VirtualMemory?: number;\r\n\r\n    threads?: any[];\r\n\r\n    constructor() {}\r\n}\r\n","export class Log {\r\n    _id: string;\r\n    LogEntry: {\r\n        App: string; // ERP, PAI, MDC, TBF\r\n        RegisteredAppId: string; // instance key\r\n        RegisteredAppType: string; // TBLOADER, NETCORE, NG, PROVISIONING\r\n        Category: string; //\r\n        Module: string;\r\n        SubModule: string;\r\n        Document: string;\r\n        Subscription: string;\r\n        AccountName: string;\r\n        Lifetime: string;\r\n        Operation: string;\r\n        ContextDescription: string;\r\n        Method: string;\r\n        EntryCreated: string;\r\n        Message: string;\r\n        Level: number;\r\n    };\r\n\r\n    constructor() {}\r\n}\r\n","import { Injectable, Inject, isDevMode } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\n\r\nimport { Observable, of, BehaviorSubject } from 'rxjs';\r\nimport { catchError, map } from 'rxjs/operators';\r\n\r\nimport { StompRService, StompState } from '@stomp/ng2-stompjs';\r\nimport { Message } from '@stomp/stompjs';\r\n\r\nimport { LoggerOperationResult, TBServerInfo } from '../models/logger-operation-result.model';\r\nimport { EntriesParams } from '../models/entries.model';\r\nimport { MonitorParams } from '../models/monitor.model';\r\n\r\nlet loggerInstance: TbLoggerService;\r\nexport const logger = () => loggerInstance;\r\n\r\nexport interface LogEntry {\r\n    Message: string;\r\n    Registeredappid: string;\r\n    AccountName?: string;\r\n    Subscription?: string;\r\n    App?: string;\r\n    Category?: string;\r\n    Level: LogLevel;\r\n}\r\n\r\nexport enum LogLevel {\r\n    Trace = 0,\r\n    Debug,\r\n    Warn,\r\n    Error\r\n}\r\n\r\nexport function prepareLog(message: string, logLevel: LogLevel = LogLevel.Debug) {\r\n    const log: LogEntry = {\r\n        Message: message,\r\n        Registeredappid: logger().getAppId(),\r\n        AccountName: localStorage.getItem('_accountname'),\r\n        Subscription: localStorage.getItem('_company'),\r\n        Category: 'Client',\r\n        Level: logLevel\r\n    };\r\n    return log;\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class TbLoggerService {\r\n    public loggerUrl: string;\r\n    public serverMonitorUrl: string;\r\n    private howMany = 100;\r\n\r\n    public mqConnectionState: StompState = StompState.CLOSED;\r\n    public mqConnectionStateObservable: BehaviorSubject<StompState> = new BehaviorSubject(StompState.CLOSED);\r\n\r\n    constructor(@Inject('env') private env, private http: HttpClient, public stompService: StompRService) {\r\n        loggerInstance = this;\r\n        if (env.stompConfig) this.mqInit();\r\n    }\r\n\r\n    mqInit() {\r\n        if (this.env.stompConfig) {\r\n            this.stompService.config = this.env.stompConfig;\r\n            this.stompService.initAndConnect();\r\n            this.stompService.state.subscribe((status: StompState) => {\r\n                this.mqConnectionState = status;\r\n                this.mqConnectionStateObservable.next(status);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Ritorna la App Id dell'applicazione frontend che sta loggando,\r\n     * caricata da un file di configurazione caricato dinamicamente (assets/environment.json)\r\n     */\r\n    getAppId() {\r\n        return this.env.logger.appId;\r\n    }\r\n\r\n    /**\r\n     * Ritorna la base url del logger,\r\n     * caricata da un file di configurazione caricato dinamicamente (assets/environment.json)\r\n     */\r\n    getLoggerUrl() {\r\n        return this.loggerUrl ? this.loggerUrl : this.env.logger.url;\r\n    }\r\n\r\n    /**\r\n     * Ritorna la api per inserire log con appId configurato in environment.json\r\n     */\r\n    getLoggerPostUrl() {\r\n        return `${this.getLoggerUrl()}entries/${this.getAppId()}/`;\r\n    }\r\n\r\n    /**\r\n     * M4 Backend URL\r\n     */\r\n    getServerMonitorUrl() {\r\n        return this.serverMonitorUrl ? this.serverMonitorUrl : this.env.serverMonitor.url;\r\n    }\r\n\r\n    private _shouldLog = (logLevel: LogLevel) => logLevel >= this.env.logger.level;\r\n    private _serverLog = (logLevel: LogLevel, message: string) =>\r\n        this._shouldLog(logLevel) && this.http.post(this.getLoggerPostUrl(), prepareLog(message, logLevel)).toPromise();\r\n\r\n    /**\r\n     * @param message\r\n     * @param optionalParams\r\n     */\r\n    log(message?: any): void {\r\n        if (this._shouldLog(LogLevel.Trace)) console.log(`%c${message}`, `color:#3daf67`);\r\n        this._serverLog(LogLevel.Trace, message);\r\n    }\r\n\r\n    /**\r\n     * @param message\r\n     * @param optionalParams\r\n     */\r\n    debug(message?: any): void {\r\n        if (this._shouldLog(LogLevel.Debug)) console.log(`%c${message}`, `color:#0277bd`);\r\n        this._serverLog(LogLevel.Debug, message);\r\n    }\r\n\r\n    /**\r\n     * @param message\r\n     * @param optionalParams\r\n     */\r\n    warn(message?: any): void {\r\n        if (this._shouldLog(LogLevel.Warn)) console.log(`%c${message}`, `color:#FF9633`);\r\n        this._serverLog(LogLevel.Warn, message);\r\n    }\r\n\r\n    /**\r\n     * @param message\r\n     * @param optionalParams\r\n     */\r\n    error(message?: any): void {\r\n        if (this._shouldLog(LogLevel.Error)) console.error(`%c${message}`, `color:red`);\r\n        this._serverLog(LogLevel.Error, message);\r\n    }\r\n\r\n    /**\r\n     * Log per statistiche client (es: usato da login page per tracciare risoluzione schermo)\r\n     *\r\n     * @param message\r\n     * @param optionalParams\r\n     */\r\n    stat(message?: any): void {\r\n        console.log(`%c${message}`, `color:#884EA0`);\r\n        this._serverLog(LogLevel.Trace, message);\r\n    }\r\n\r\n    /**\r\n     * Return logs: LoggerOperationResult\r\n     *\r\n     * @param params: EntriesParams\r\n     */\r\n    public getLogs(params: EntriesParams): Observable<boolean | LoggerOperationResult> {\r\n        if (!params.instanceKey) {\r\n            const error = new LoggerOperationResult();\r\n            error.Result = false;\r\n            error.Message = 'Error - No instanceKey, no party';\r\n            return of(error);\r\n        }\r\n        // console.log('this.getLoggerUrl()', this.getLoggerUrl());\r\n        const url = this.getLoggerUrl() + `entries/${params.instanceKey}`;\r\n\r\n        let p = new HttpParams();\r\n        p = p.append('howMany', '' + this.howMany);\r\n        if (params.accountName) p = p.append('accountName', params.accountName);\r\n        if (params.subscriptionKey) p = p.append('subscription', params.subscriptionKey);\r\n        if (params.category) p = p.append('categories', params.category);\r\n        if (params.apps) p = p.append('apps', params.apps);\r\n        if (params.appTypes) p = p.append('appTypes', params.appTypes);\r\n        if (params.levels) p = p.append('levels', params.levels);\r\n        if (params.rangeDateStart && params.rangeDateEnd) {\r\n            if (params.rangeDateStart === params.rangeDateEnd) p = p.append('date', params.rangeDateStart);\r\n            else p = p.append('date', params.rangeDateStart + ';' + params.rangeDateEnd);\r\n        }\r\n        const httpOptions = {\r\n            params: p\r\n        };\r\n\r\n        return this.http.get<LoggerOperationResult>(url, httpOptions).pipe(\r\n            // tap(op => console.log('TbLoggerService.getLogs', op)),\r\n            catchError(this.handleError('TbLoggerService.getLogs', false))\r\n        );\r\n    }\r\n\r\n    public getApps(appId: string): Observable<boolean | LoggerOperationResult> {\r\n        if (!appId) {\r\n            const error = new LoggerOperationResult();\r\n            error.Result = false;\r\n            error.Message = 'Error - No appId, no party';\r\n            return of(error);\r\n        }\r\n\r\n        const url = this.getLoggerUrl() + `apps/${appId}`;\r\n\r\n        return this.http.get<LoggerOperationResult>(url).pipe(\r\n            // tap(op => console.log('TbLoggerService.getApps with appId: ', appId, op)),\r\n            catchError(this.handleError('TbLoggerService.getApps', false))\r\n        );\r\n    }\r\n\r\n    public getAppTypes(appId: string): Observable<boolean | LoggerOperationResult> {\r\n        if (!appId) {\r\n            const error = new LoggerOperationResult();\r\n            error.Result = false;\r\n            error.Message = 'Error - No appId, no party';\r\n            return of(error);\r\n        }\r\n\r\n        const url = this.getLoggerUrl() + `appTypes/${appId}`;\r\n\r\n        return this.http.get<LoggerOperationResult>(url).pipe(\r\n            // tap(op => console.log('TbLoggerService.getAppTypes with appId: ', appId, op)),\r\n            catchError(this.handleError('TbLoggerService.getAppTypes', false))\r\n        );\r\n    }\r\n\r\n    public getInstanceKey(): Observable<boolean | LoggerOperationResult> {\r\n        const url = this.getLoggerUrl() + `appIds`;\r\n\r\n        return this.http.get<LoggerOperationResult>(url).pipe(\r\n            // tap(op => console.log(url, 'TbLoggerService.getInstanceKey with appId: ', op)),\r\n            catchError(this.handleError('TbLoggerService.getInstanceKey', false))\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Legge tutte le subscription\r\n     */\r\n    public getSubscriptionKey(): Observable<boolean | LoggerOperationResult> {\r\n        const url = this.getLoggerUrl() + `subscriptionKeys`;\r\n\r\n        return this.http.get<LoggerOperationResult>(url).pipe(\r\n            // tap(op => console.log('TbLoggerService.getSubscriptionKey: ', op)),\r\n            catchError(this.handleError('TbLoggerService.getSubscriptionKey', false))\r\n        );\r\n    }\r\n\r\n    public getCategories(appId: string): Observable<boolean | LoggerOperationResult> {\r\n        if (!appId) {\r\n            const error = new LoggerOperationResult();\r\n            error.Result = false;\r\n            error.Message = 'Error - No appId, no party';\r\n            return of(error);\r\n        }\r\n\r\n        const url = this.getLoggerUrl() + `categories/${appId}`;\r\n\r\n        return this.http.get<LoggerOperationResult>(url).pipe(\r\n            // tap(op => console.log('TbLoggerService.getCategories with appId: ', appId, op)),\r\n            catchError(this.handleError('TbLoggerService.getCategories', false))\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Handle Http operation that failed.\r\n     * Let the app continue.\r\n     * @param operation - name of the operation that failed\r\n     * @param result - optional value to return as the observable result\r\n     */\r\n    public handleError<T>(operation = 'operation', result?: T) {\r\n        return (error: any): Observable<T> => {\r\n            console.error(`${operation} failed: ${error.error}`);\r\n\r\n            // Let the app keep running by returning an empty result.\r\n            return of(result as T);\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Connessione a RabbitMQ\r\n     */\r\n    public mqConnect(queueName: string) {\r\n        return this.stompService.subscribe(queueName).pipe(map((msg: Message) => JSON.parse(msg.body)));\r\n    }\r\n\r\n    public mqConnected() {\r\n        return this.stompService.connected();\r\n    }\r\n    public mqDisconnect() {\r\n        return this.stompService.disconnect();\r\n    }\r\n\r\n    // -------------------------------------------------------------------------------------------------------\r\n    // PARTE TBSERVERMONITOR\r\n    // -------------------------------------------------------------------------------------------------------\r\n    public getTBInfosLogs(params: MonitorParams): Observable<boolean | TBServerInfo[]> {\r\n        let p = new HttpParams();\r\n\r\n        if (params.accountName) p = p.append('accountName', '' + params.accountName);\r\n        if (params.processName) p = p.append('processName', '' + params.processName);\r\n        if (params.minutes) p = p.append('minute', '' + params.minutes);\r\n\r\n        const httpOptions = { params: p };\r\n\r\n        const url = this.getServerMonitorUrl() + `tbServers/${params.instanceKey}`;\r\n\r\n        return this.http.get<TBServerInfo[]>(url, httpOptions).pipe(catchError(this.handleError('TbLoggerService.getTBInfosLogs', false)));\r\n    }\r\n}\r\n","export enum LogStatus {\r\n    Info = 0,\r\n    Debug = 1,\r\n    Warn = 2,\r\n    Error = 3,\r\n    Fatal = 4\r\n}\r\n","import { Injectable, Inject } from '@angular/core';\r\n\r\nimport { NotificationService } from '@progress/kendo-angular-notification';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class TbNotificationService {\r\n    constructor(private notificationService: NotificationService) {}\r\n\r\n    public show(msg, style: any = 'none'): void {\r\n        this.notificationService.show({\r\n            content: msg,\r\n            animation: { type: 'slide', duration: 200 },\r\n            position: { horizontal: 'right', vertical: 'bottom' },\r\n            type: { style: style, icon: true },\r\n            hideAfter: 4000\r\n        });\r\n    }\r\n}\r\n","import { NgModule, ModuleWithProviders, Inject } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { ButtonsModule } from '@progress/kendo-angular-buttons';\r\nimport { DropDownsModule } from '@progress/kendo-angular-dropdowns';\r\nimport { InputsModule } from '@progress/kendo-angular-inputs';\r\nimport { DateInputsModule } from '@progress/kendo-angular-dateinputs';\r\nimport { NotificationModule } from '@progress/kendo-angular-notification';\r\n\r\nimport { StompRService } from '@stomp/ng2-stompjs';\r\n\r\n@NgModule({\r\n    imports: [CommonModule, NotificationModule, ButtonsModule, InputsModule, DateInputsModule, FormsModule, DropDownsModule],\r\n    providers: [StompRService]\r\n})\r\nexport class TbLoggerModule {\r\n    static forRoot(): ModuleWithProviders {\r\n        return {\r\n            ngModule: TbLoggerModule,\r\n            providers: [StompRService]\r\n        };\r\n    }\r\n}\r\n"]}