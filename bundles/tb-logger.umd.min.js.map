{"version":3,"sources":["ng://@tb/logger/lib/models/entries.model.ts","ng://@tb/logger/lib/models/monitor.model.ts","ng://@tb/logger/lib/models/operation-result.model.ts","ng://@tb/logger/lib/models/logger-operation-result.model.ts","ng://@tb/logger/lib/models/log.model.ts","ng://@tb/logger/lib/models/log-status.enum.ts","null","ng://@tb/logger/lib/services/tb-logger.service.ts","ng://@tb/logger/lib/services/notification.service.ts","ng://@tb/logger/lib/tb-logger.module.ts"],"names":["EntriesParams","MonitorParams","OperationResult","Log","LoggerOperationResult","Info","Debug","Warn","Error","Fatal","__read","o","n","m","Symbol","iterator","r","e","i","call","ar","next","done","push","value","error","__spread","arguments","length","concat","TbLoggerService","prototype","mqInit","_this","this","env","stompConfig","stompService","config","initAndConnect","state","subscribe","status","mqConnectionState","mqConnectionStateObservable","getLoggerUrl","loggerUrl","logger","url","getServerMonitorUrl","serverMonitorUrl","serverMonitor","log","message","optionalParams","_i","console","apply","debug","warn","getLogs","params","instanceKey","result","of","p","HttpParams","append","howMany","accountName","subscriptionKey","category","apps","appTypes","levels","rangeDateStart","rangeDateEnd","httpOptions","http","get","pipe","catchError","handleError","getApps","appId","getAppTypes","getInstanceKey","getSubscriptionKey","getCategories","operation","mqConnect","queueName","map","msg","JSON","parse","body","mqConnected","connected","mqDisconnect","disconnect","getTBInfosLogs","processName","Injectable","args","providedIn","Inject","HttpClient","StompRService","StompState","CLOSED","BehaviorSubject","TbNotificationService","show","style","notificationService","content","animation","type","duration","position","horizontal","vertical","icon","hideAfter","NotificationService","TbLoggerModule","forRoot","ngModule","providers","NgModule","imports","CommonModule","NotificationModule","ButtonsModule","InputsModule","DateInputsModule","FormsModule","DropDownsModule"],"mappings":"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","sourcesContent":["export class EntriesParams {\r\n    instanceKey: string;\r\n    subscriptionKey: string;\r\n    apps: string;\r\n    appTypes: string;\r\n    category: string;\r\n    howMany: string;\r\n    offSet: string;\r\n    levels: string;\r\n    textToFind: string;\r\n    useHistory: string;\r\n    accountName: string;\r\n    rangeDateStart: string;\r\n    rangeDateEnd: string;\r\n\r\n    constructor() {}\r\n}\r\n","export class MonitorParams {\r\n    instanceKey: string;\r\n    processName: string;\r\n\r\n    constructor() {}\r\n}\r\n","export class OperationResult {\r\n    Result: boolean;\r\n    Message?: string;\r\n    Code?: number;\r\n    Content?: any;\r\n\r\n    constructor() {}\r\n}\r\n","export class LoggerOperationResult {\r\n    result: boolean;\r\n    message?: string;\r\n    code?: number;\r\n    content?: any;\r\n\r\n    constructor() {}\r\n}\r\n\r\nexport class TBServerInfos {\r\n    tread: TBServerInfo[];\r\n    constructor() {}\r\n}\r\n\r\nexport class TBServerInfo {\r\n    processName: string;\r\n    loginNumber?: number;\r\n    documentNumber?: number;\r\n\r\n    docMetrics?: any[];\r\n    kernelMS?: number;\r\n    loginInfos?: any[];\r\n    phisicalMemory?: number;\r\n    userMS?: number;\r\n    virtualMemory?: number;\r\n\r\n    constructor() {}\r\n}\r\n","export class Log {\r\n    _id: string;\r\n    logEntry: {\r\n        app: string; // ERP, PAI, MDC, TBF\r\n        registeredAppId: string; // instance key\r\n        registeredAppType: string; // TBLOADER, NETCORE, NG, PROVISIONING\r\n        category: string; //\r\n        module: string;\r\n        subModule: string;\r\n        document: string;\r\n        subscription: string;\r\n        accountName: string;\r\n        lifetime: string;\r\n        operation: string;\r\n        contextDescription: string;\r\n        method: string;\r\n        entryCreated: string;\r\n        message: string;\r\n        level: number;\r\n    };\r\n\r\n    constructor() {}\r\n}\r\n","export enum LogStatus {\r\n    Info = 0,\r\n    Debug = 1,\r\n    Warn = 2,\r\n    Error = 3,\r\n    Fatal = 4\r\n}\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Injectable, Inject } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\n\r\nimport { EntriesParams } from '../models/entries.model';\r\nimport { LoggerOperationResult, TBServerInfo } from '../models/logger-operation-result.model';\r\nimport { catchError, tap, map } from 'rxjs/operators';\r\nimport { Observable, of, BehaviorSubject } from 'rxjs';\r\nimport { StompRService, StompConfig, StompState } from '@stomp/ng2-stompjs';\r\nimport { Message } from '@stomp/stompjs';\r\nimport { MonitorParams } from '../models/monitor.model';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class TbLoggerService {\r\n    public loggerUrl: string;\r\n    public serverMonitorUrl: string;\r\n    private howMany = 100;\r\n\r\n    public mqConnectionState: StompState = StompState.CLOSED;\r\n    public mqConnectionStateObservable: BehaviorSubject<StompState> = new BehaviorSubject(StompState.CLOSED);\r\n\r\n    constructor(@Inject('env') private env, private http: HttpClient, public stompService: StompRService) {\r\n        if (env.stompConfig) this.mqInit();\r\n    }\r\n\r\n    mqInit() {\r\n        if (this.env.stompConfig) {\r\n            this.stompService.config = this.env.stompConfig;\r\n            this.stompService.initAndConnect();\r\n            this.stompService.state.subscribe((status: StompState) => {\r\n                this.mqConnectionState = status;\r\n                this.mqConnectionStateObservable.next(status);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Ritorna la base url del logger,\r\n     * caricata da un file di configurazione caricato dinamicamente (assets/environment.json)\r\n     */\r\n    getLoggerUrl() {\r\n        return this.loggerUrl ? this.loggerUrl : this.env.logger.url;\r\n    }\r\n\r\n    /**\r\n     * M4 Backend URL\r\n     */\r\n    getServerMonitorUrl() {\r\n        return this.serverMonitorUrl ? this.serverMonitorUrl : this.env.serverMonitor.url;\r\n    }\r\n\r\n    /**\r\n     * Console.log in attesa di post to logger\r\n     *\r\n     * @param message\r\n     * @param optionalParams\r\n     */\r\n    log(message?: any, ...optionalParams: any[]): void {\r\n        console.log(message, ...optionalParams);\r\n    }\r\n\r\n    /**\r\n     * Console.log in attesa di post to logger\r\n     *\r\n     * @param message\r\n     * @param optionalParams\r\n     */\r\n    debug(message?: any, ...optionalParams: any[]): void {\r\n        console.log(message, ...optionalParams);\r\n    }\r\n\r\n    /**\r\n     * Console.warn in attesa di post to logger\r\n     *\r\n     * @param message\r\n     * @param optionalParams\r\n     */\r\n    warn(message?: any, ...optionalParams: any[]): void {\r\n        console.warn(message, ...optionalParams);\r\n    }\r\n\r\n    /**\r\n     * Console.error in attesa di post to logger\r\n     *\r\n     * @param message\r\n     * @param optionalParams\r\n     */\r\n    error(message?: any, ...optionalParams: any[]): void {\r\n        console.error(message, ...optionalParams);\r\n    }\r\n\r\n    /**\r\n     * Return logs: LoggerOperationResult\r\n     *\r\n     * @param params: EntriesParams\r\n     */\r\n    public getLogs(params: EntriesParams): Observable<boolean | LoggerOperationResult> {\r\n        if (!params.instanceKey) {\r\n            const error = new LoggerOperationResult();\r\n            error.result = false;\r\n            error.message = 'Error - No instanceKey, no party';\r\n            return of(error);\r\n        }\r\n        // console.log('this.getLoggerUrl()', this.getLoggerUrl());\r\n        const url = this.getLoggerUrl() + `entries/${params.instanceKey}`;\r\n\r\n        let p = new HttpParams();\r\n        p = p.append('howMany', '' + this.howMany);\r\n        if (params.accountName) p = p.append('accountName', params.accountName);\r\n        if (params.subscriptionKey) p = p.append('subscription', params.subscriptionKey);\r\n        if (params.category) p = p.append('categories', params.category);\r\n        if (params.apps) p = p.append('apps', params.apps);\r\n        if (params.appTypes) p = p.append('appTypes', params.appTypes);\r\n        if (params.levels) p = p.append('levels', params.levels);\r\n        if (params.rangeDateStart && params.rangeDateEnd) {\r\n            if (params.rangeDateStart === params.rangeDateEnd) p = p.append('date', params.rangeDateStart);\r\n            else p = p.append('date', params.rangeDateStart + ';' + params.rangeDateEnd);\r\n        }\r\n        const httpOptions = {\r\n            params: p\r\n        };\r\n\r\n        return this.http.get<LoggerOperationResult>(url, httpOptions).pipe(\r\n            // tap(op => console.log('TbLoggerService.getLogs', op)),\r\n            catchError(this.handleError('TbLoggerService.getLogs', false))\r\n        );\r\n    }\r\n\r\n    public getApps(appId: string): Observable<boolean | LoggerOperationResult> {\r\n        if (!appId) {\r\n            const error = new LoggerOperationResult();\r\n            error.result = false;\r\n            error.message = 'Error - No appId, no party';\r\n            return of(error);\r\n        }\r\n\r\n        const url = this.getLoggerUrl() + `apps/${appId}`;\r\n\r\n        return this.http.get<LoggerOperationResult>(url).pipe(\r\n            // tap(op => console.log('TbLoggerService.getApps with appId: ', appId, op)),\r\n            catchError(this.handleError('TbLoggerService.getApps', false))\r\n        );\r\n    }\r\n\r\n    public getAppTypes(appId: string): Observable<boolean | LoggerOperationResult> {\r\n        if (!appId) {\r\n            const error = new LoggerOperationResult();\r\n            error.result = false;\r\n            error.message = 'Error - No appId, no party';\r\n            return of(error);\r\n        }\r\n\r\n        const url = this.getLoggerUrl() + `appTypes/${appId}`;\r\n\r\n        return this.http.get<LoggerOperationResult>(url).pipe(\r\n            // tap(op => console.log('TbLoggerService.getAppTypes with appId: ', appId, op)),\r\n            catchError(this.handleError('TbLoggerService.getAppTypes', false))\r\n        );\r\n    }\r\n\r\n    public getInstanceKey(): Observable<boolean | LoggerOperationResult> {\r\n        const url = this.getLoggerUrl() + `appIds`;\r\n\r\n        return this.http.get<LoggerOperationResult>(url).pipe(\r\n            // tap(op => console.log(url, 'TbLoggerService.getInstanceKey with appId: ', op)),\r\n            catchError(this.handleError('TbLoggerService.getInstanceKey', false))\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Legge tutte le subscription\r\n     */\r\n    public getSubscriptionKey(): Observable<boolean | LoggerOperationResult> {\r\n        const url = this.getLoggerUrl() + `subscriptionKeys`;\r\n\r\n        return this.http.get<LoggerOperationResult>(url).pipe(\r\n            // tap(op => console.log('TbLoggerService.getSubscriptionKey: ', op)),\r\n            catchError(this.handleError('TbLoggerService.getSubscriptionKey', false))\r\n        );\r\n    }\r\n\r\n    public getCategories(appId: string): Observable<boolean | LoggerOperationResult> {\r\n        if (!appId) {\r\n            const error = new LoggerOperationResult();\r\n            error.result = false;\r\n            error.message = 'Error - No appId, no party';\r\n            return of(error);\r\n        }\r\n\r\n        const url = this.getLoggerUrl() + `categories/${appId}`;\r\n\r\n        return this.http.get<LoggerOperationResult>(url).pipe(\r\n            // tap(op => console.log('TbLoggerService.getCategories with appId: ', appId, op)),\r\n            catchError(this.handleError('TbLoggerService.getCategories', false))\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Handle Http operation that failed.\r\n     * Let the app continue.\r\n     * @param operation - name of the operation that failed\r\n     * @param result - optional value to return as the observable result\r\n     */\r\n    public handleError<T>(operation = 'operation', result?: T) {\r\n        return (error: any): Observable<T> => {\r\n            console.error(`${operation} failed: ${error.error}`);\r\n\r\n            // Let the app keep running by returning an empty result.\r\n            return of(result as T);\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Connessione a RabbitMQ\r\n     */\r\n    public mqConnect(queueName: string) {\r\n        return this.stompService.subscribe(queueName).pipe(map((msg: Message) => JSON.parse(msg.body)));\r\n    }\r\n\r\n    public mqConnected() {\r\n        return this.stompService.connected();\r\n    }\r\n    public mqDisconnect() {\r\n        return this.stompService.disconnect();\r\n    }\r\n\r\n    // -------------------------------------------------------------------------------------------------------\r\n    // PARTE TBSERVERMONITOR\r\n    // -------------------------------------------------------------------------------------------------------\r\n    public getTBInfosLogs(params: MonitorParams): Observable<boolean | TBServerInfo[]> {\r\n        let p = new HttpParams();\r\n\r\n        if (params.processName) p = p.append('processName', '' + params.processName);\r\n\r\n        const httpOptions = { params: p };\r\n\r\n        const url = this.getServerMonitorUrl() + `GetTbServersNumber/${params.instanceKey}`;\r\n\r\n        return this.http.get<TBServerInfo[]>(url, httpOptions).pipe(catchError(this.handleError('TbLoggerService.getTBInfosLogs', false)));\r\n    }\r\n}\r\n","import { Injectable, Inject } from '@angular/core';\r\n\r\nimport { NotificationService } from '@progress/kendo-angular-notification';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class TbNotificationService {\r\n    constructor(private notificationService: NotificationService) {}\r\n\r\n    public show(msg, style: any = 'none'): void {\r\n        this.notificationService.show({\r\n            content: msg,\r\n            animation: { type: 'slide', duration: 200 },\r\n            position: { horizontal: 'right', vertical: 'bottom' },\r\n            type: { style: style, icon: true },\r\n            hideAfter: 4000\r\n        });\r\n    }\r\n}\r\n","import { NgModule, ModuleWithProviders, Inject } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { ButtonsModule } from '@progress/kendo-angular-buttons';\r\nimport { DropDownsModule } from '@progress/kendo-angular-dropdowns';\r\nimport { InputsModule } from '@progress/kendo-angular-inputs';\r\nimport { DateInputsModule } from '@progress/kendo-angular-dateinputs';\r\nimport { NotificationModule } from '@progress/kendo-angular-notification';\r\n\r\nimport { StompRService } from '@stomp/ng2-stompjs';\r\n\r\n@NgModule({\r\n    imports: [CommonModule, NotificationModule, ButtonsModule, InputsModule, DateInputsModule, FormsModule, DropDownsModule],\r\n    providers: [StompRService]\r\n})\r\nexport class TbLoggerModule {\r\n    static forRoot(): ModuleWithProviders {\r\n        return {\r\n            ngModule: TbLoggerModule,\r\n            providers: [StompRService]\r\n        };\r\n    }\r\n}\r\n"]}