{"version":3,"sources":["ng://@tb/logger/lib/models/entries.model.ts","ng://@tb/logger/lib/models/monitor.model.ts","ng://@tb/logger/lib/models/logger-operation-result.model.ts","ng://@tb/logger/lib/services/tb-logger.service.ts","ng://@tb/logger/lib/models/log-status.enum.ts","ng://@tb/logger/lib/services/notification.service.ts","ng://@tb/logger/lib/tb-logger.module.ts"],"names":["EntriesParams","instanceKey","this","MonitorParams","accountName","processName","minutes","LoggerOperationResult","Result","Message","TBServerInfo","DateTime","Date","ProcessName","ProcessId","VirtualMemory","PhisicalMemory","loggerInstance","Info","Debug","Warn","Error","Fatal","logger","Trace","prepareLog","message","logLevel","LogLevel","Registeredappid","getAppId","AccountName","localStorage","getItem","Subscription","Category","Level","TbLoggerService","env","http","stompService","ngZone","_this","date","timeZoneOffSet","getTimezoneOffset","mqConnectionState","StompState","CLOSED","mqConnectionStateObservable","BehaviorSubject","_shouldLog","level","_serverLog","sendLog","loggerUrl","url","serverMonitorUrl","serverMonitor","stompConfig","mqInit","prototype","config","initAndConnect","state","subscribe","status","next","appId","getLoggerUrl","getLoggerPostUrl","getServerMonitorUrl","runOutsideAngular","post","toPromise","then","__","err","log","console","debug","warn","error","stat","getLogs","params","of","p","HttpParams","howMany","append","offSet","subscriptionKey","category","apps","appTypes","levels","rangeDateStart","rangeDateEnd","toString","httpOptions","get","pipe","catchError","handleError","getApps","getAppTypes","getInstanceKey","getSubscriptionKey","getCategories","operation","result","mqConnect","queueName","map","msg","JSON","parse","body","mqConnected","connected","mqDisconnect","disconnect","getTBInfosLogs","Injectable","args","providedIn","Inject","HttpClient","StompRService","NgZone","TbNotificationService","notificationService","show","style","content","animation","type","duration","position","horizontal","vertical","icon","hideAfter","NotificationService","TbLoggerModule","forRoot","ngModule","providers","NgModule","imports","CommonModule","NotificationModule","ButtonsModule","InputsModule","DateInputsModule","FormsModule","DropDownsModule"],"mappings":"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","sourcesContent":["export class EntriesParams {\r\n    instanceKey: string;\r\n    subscriptionKey!: string;\r\n    apps!: string;\r\n    appTypes!: string;\r\n    category!: string;\r\n    howMany!: string;\r\n    offSet!: string;\r\n    levels!: string;\r\n    textToFind!: string;\r\n    useHistory!: string;\r\n    accountName!: string;\r\n    rangeDateStart!: string;\r\n    rangeDateEnd!: string;\r\n\r\n    constructor(instanceKey: string) {\r\n        this.instanceKey = instanceKey;\r\n    } \r\n}\r\n","export class MonitorParams {\r\n    instanceKey: string;\r\n    accountName: string;\r\n    processName: string;\r\n    minutes = '1';\r\n\r\n    constructor(instanceKey: string, accountName: string, processName: string) {\r\n        this.instanceKey = instanceKey;\r\n        this.accountName = accountName;\r\n        this.processName = processName;\r\n    }\r\n}\r\n","export class LoggerOperationResult {\r\n    Result: boolean;\r\n    Message?: string;\r\n    Code?: number;\r\n    Content?: any;\r\n\r\n    constructor(Result: boolean, Message: string) {\r\n        this.Result = Result;\r\n    }\r\n}\r\n\r\nexport interface TBServerInfos {\r\n    tread: TBServerInfo[];\r\n}\r\n\r\nexport class TBServerInfo {\r\n    DateTime = new Date();\r\n    ProcessName = '';\r\n    ProcessId = '';\r\n    LoginNumber?: number;\r\n    DocumentNumber?: number; \r\n\r\n    DocMetrics?: any[];\r\n    LernelMS?: number;\r\n    LoginInfos?: any[];\r\n    UserMS?: number;\r\n    VirtualMemory = 100000;\r\n    PhisicalMemory = 100000;\r\n\r\n    threads?: any[];\r\n}\r\n","import { Injectable, Inject, isDevMode, NgZone } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\n\r\nimport { Observable, of, BehaviorSubject } from 'rxjs';\r\nimport { catchError, map } from 'rxjs/operators';\r\n\r\nimport { StompRService, StompState } from '@stomp/ng2-stompjs';\r\nimport { Message } from '@stomp/stompjs';\r\n\r\nimport { LoggerOperationResult, TBServerInfo } from '../models/logger-operation-result.model';\r\nimport { EntriesParams } from '../models/entries.model';\r\nimport { MonitorParams } from '../models/monitor.model';\r\nimport { TbLoggerEnvironment } from '../models/logger-environment';\r\n\r\nlet loggerInstance: TbLoggerService;\r\nexport const logger = () => loggerInstance;\r\n\r\nexport interface LogEntry {\r\n    Message: string;\r\n    Registeredappid: string;\r\n    AccountName?: string | null;\r\n    Subscription?: string | null;\r\n    App?: string;\r\n    Category?: string;\r\n    Level: LogLevel;\r\n}\r\n\r\nexport enum LogLevel {\r\n    Trace = 0,\r\n    Debug,\r\n    Warn,\r\n    Error\r\n}\r\n\r\nexport function prepareLog(message: string, logLevel: LogLevel = LogLevel.Debug) {\r\n    const log: LogEntry = {\r\n        Message: message,\r\n        Registeredappid: logger().getAppId(),\r\n        AccountName: localStorage.getItem('_accountname'),\r\n        Subscription: localStorage.getItem('_company'),\r\n        Category: 'Client',\r\n        Level: logLevel\r\n    }; \r\n    return log;\r\n} \r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class TbLoggerService {\r\n    loggerUrl: string;\r\n    serverMonitorUrl: string;\r\n    date = new Date();\r\n    timeZoneOffSet = () => -this.date.getTimezoneOffset() / 60;\r\n\r\n    mqConnectionState: StompState = StompState.CLOSED;\r\n    mqConnectionStateObservable: BehaviorSubject<number> = new BehaviorSubject(StompState.CLOSED);\r\n\r\n    constructor(\r\n        @Inject('env') private env: TbLoggerEnvironment,\r\n        private http: HttpClient, \r\n        public stompService: StompRService,\r\n        private ngZone: NgZone\r\n    ) {\r\n        loggerInstance = this;\r\n        this.loggerUrl = this.env.logger && this.env.logger.url;\r\n        this.serverMonitorUrl = this.env.serverMonitor && this.env.serverMonitor.url;\r\n        if (env.stompConfig) this.mqInit();\r\n    }\r\n\r\n    mqInit() {\r\n        if (this.env.stompConfig) {\r\n            this.stompService.config = this.env.stompConfig;\r\n            this.stompService.initAndConnect();\r\n            this.stompService.state.subscribe((status: StompState) => {\r\n                this.mqConnectionState = status;\r\n                this.mqConnectionStateObservable.next(status);\r\n            });\r\n        } \r\n    }\r\n\r\n    /**\r\n     * Ritorna la App Id dell'applicazione frontend che sta loggando,\r\n     * caricata da un file di configurazione caricato dinamicamente (assets/environment.json)\r\n     */\r\n    getAppId() {\r\n        return this.env.logger.appId;\r\n    }\r\n\r\n    /**\r\n     * Ritorna la base url del logger,\r\n     * caricata da un file di configurazione caricato dinamicamente (assets/environment.json)\r\n     */\r\n    getLoggerUrl() {\r\n        return this.loggerUrl ? this.loggerUrl : this.env.logger.url;\r\n    }\r\n\r\n    /**\r\n     * Ritorna la api per inserire log con appId configurato in environment.json\r\n     */\r\n    getLoggerPostUrl() {\r\n        return `${this.getLoggerUrl()}entries/${this.getAppId()}/`;\r\n    }\r\n\r\n    /**\r\n     * M4 Backend URL\r\n     */\r\n    getServerMonitorUrl() { \r\n        return this.serverMonitorUrl ? this.serverMonitorUrl : this.env.serverMonitor.url;\r\n    }\r\n\r\n    private _shouldLog = (logLevel: LogLevel) => logLevel >= this.env.logger.level;\r\n    private _serverLog = (logLevel: LogLevel, message: string) => this._shouldLog(logLevel) && this.sendLog(message, logLevel);\r\n\r\n    private sendLog(message: string, logLevel: LogLevel) {\r\n        this.ngZone.runOutsideAngular(() => {\r\n            this.http\r\n                .post(this.getLoggerPostUrl(), prepareLog(message, logLevel))\r\n                .toPromise()\r\n                .then(__ => {}, err => true);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @param message\r\n     * @param optionalParams\r\n     */\r\n    log(message?: any): void {\r\n        if (this._shouldLog(LogLevel.Trace)) console.log(`%c${message}`, `color:#3daf67`);\r\n        this._serverLog(LogLevel.Trace, message);\r\n    }\r\n\r\n    /**\r\n     * @param message\r\n     * @param optionalParams\r\n     */\r\n    debug(message?: any): void {\r\n        if (this._shouldLog(LogLevel.Debug)) console.log(`%c${message}`, `color:#0277bd`);\r\n        this._serverLog(LogLevel.Debug, message);\r\n    }\r\n\r\n    /**\r\n     * @param message\r\n     * @param optionalParams\r\n     */\r\n    warn(message?: any): void {\r\n        if (this._shouldLog(LogLevel.Warn)) console.log(`%c${message}`, `color:#FF9633`);\r\n        this._serverLog(LogLevel.Warn, message);\r\n    }\r\n\r\n    /**\r\n     * @param message\r\n     * @param optionalParams\r\n     */\r\n    error(message?: any): void {\r\n        if (this._shouldLog(LogLevel.Error)) console.error(`%c${message}`, `color:red`);\r\n        this._serverLog(LogLevel.Error, message);\r\n    }\r\n\r\n    /**\r\n     * Log per statistiche client (es: usato da login page per tracciare risoluzione schermo)\r\n     *\r\n     * @param message\r\n     * @param optionalParams\r\n     */\r\n    stat(message?: any): void {\r\n        console.log(`%c${message}`, `color:#884EA0`);\r\n        this._serverLog(LogLevel.Trace, message);\r\n    }\r\n\r\n    /**\r\n     * Return logs: LoggerOperationResult\r\n     *\r\n     * @param params: EntriesParams\r\n     */\r\n    public getLogs(params: EntriesParams): Observable<LoggerOperationResult> {\r\n        if (!params.instanceKey) {\r\n            const error = new LoggerOperationResult(false, 'Error - No instanceKey, no party');\r\n            return of(error);\r\n        }\r\n\r\n        const url = this.getLoggerUrl() + `entries/${params.instanceKey}`;\r\n        \r\n        let p = new HttpParams();\r\n        if (params.howMany) p = p.append('howMany', params.howMany);\r\n        if (params.offSet) p = p.append('offSet', params.offSet);\r\n        if (params.accountName) p = p.append('accountName', params.accountName); \r\n        if (params.subscriptionKey) p = p.append('subscription', params.subscriptionKey);\r\n        if (params.category) p = p.append('categories', params.category);\r\n        if (params.apps) p = p.append('apps', params.apps);\r\n        if (params.appTypes) p = p.append('appTypes', params.appTypes);\r\n        if (params.levels) p = p.append('levels', params.levels);\r\n        if (params.rangeDateStart && params.rangeDateEnd) {\r\n            if (params.rangeDateStart === params.rangeDateEnd) p = p.append('date', params.rangeDateStart + ';' + params.rangeDateEnd);\r\n            else p = p.append('date', params.rangeDateStart + ';' + params.rangeDateEnd);\r\n        p = p.append('timeZoneOffSet', this.timeZoneOffSet().toString());//con il timezoneoffSet non prende l'ora desiderata senza invece si\r\n\r\n        }\r\n        \r\n        const httpOptions = {\r\n            params: p\r\n        };\r\n\r\n        return this.http.get<LoggerOperationResult>(url, httpOptions).pipe(\r\n            // tap(op => console.log('TbLoggerService.getLogs', op)),\r\n            catchError(this.handleError('TbLoggerService.getLogs', new LoggerOperationResult(false, 'Error - getLogs')))\r\n        );\r\n    }\r\n\r\n    public getApps(appId: string): Observable<LoggerOperationResult> {\r\n        if (!appId) {\r\n            const error = new LoggerOperationResult(false, 'Error - No appId, no party');\r\n            return of(error);\r\n        }\r\n\r\n        const url = this.getLoggerUrl() + `apps/${appId}`;\r\n        return this.http.get<LoggerOperationResult>(url).pipe(\r\n            // tap(op => console.log('TbLoggerService.getApps with appId: ', appId, op)),\r\n            catchError(this.handleError('TbLoggerService.getApps', new LoggerOperationResult(false, 'Error - getApps')))\r\n        );\r\n    }\r\n\r\n    public getAppTypes(appId: string): Observable<LoggerOperationResult> {\r\n        if (!appId) {\r\n            const error = new LoggerOperationResult(false, 'Error - No appId, no party');\r\n            return of(error);\r\n        }\r\n\r\n        const url = this.getLoggerUrl() + `appTypes/${appId}`;\r\n\r\n        return this.http.get<LoggerOperationResult>(url).pipe(\r\n            // tap(op => console.log('TbLoggerService.getAppTypes with appId: ', appId, op)),\r\n            catchError(this.handleError('TbLoggerService.getAppTypes', new LoggerOperationResult(false, 'Error - getAppTypes')))\r\n        );\r\n    }\r\n\r\n    public getInstanceKey(): Observable<LoggerOperationResult> {\r\n\r\n        const url = this.getLoggerUrl() + `appIds`;\r\n\r\n        return this.http.get<LoggerOperationResult>(url).pipe(\r\n            // tap(op => console.log(url, 'TbLoggerService.getInstanceKey with appId: ', op)),\r\n            catchError(this.handleError('TbLoggerService.getInstanceKey', new LoggerOperationResult(false, 'Error - getInstanceKey')))\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Legge tutte le subscription\r\n     */\r\n    public getSubscriptionKey(): Observable<LoggerOperationResult> {\r\n        const url = this.getLoggerUrl() + `subscriptionKeys`;\r\n\r\n        return this.http.get<LoggerOperationResult>(url).pipe(\r\n            // tap(op => console.log('TbLoggerService.getSubscriptionKey: ', op)),\r\n            catchError(\r\n                this.handleError('TbLoggerService.getSubscriptionKey', new LoggerOperationResult(false, 'Error - getSubscriptionKey'))\r\n            )\r\n        );\r\n    }\r\n\r\n    public getCategories(appId: string): Observable<LoggerOperationResult> {\r\n        if (!appId) {\r\n            const error = new LoggerOperationResult(false, 'Error - No appId, no party');\r\n            return of(error);\r\n        }\r\n\r\n        const url = this.getLoggerUrl() + `categories/${appId}`;\r\n\r\n        return this.http.get<LoggerOperationResult>(url).pipe(\r\n            // tap(op => console.log('TbLoggerService.getCategories with appId: ', appId, op)),\r\n            catchError(this.handleError('TbLoggerService.getCategories', new LoggerOperationResult(false, 'Error -  getCategories')))\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Handle Http operation that failed.\r\n     * Let the app continue.\r\n     * @param operation - name of the operation that failed\r\n     * @param result - optional value to return as the observable result\r\n     */\r\n    public handleError<T>(operation = 'operation', result?: T) {\r\n        return (error: any): Observable<T> => {\r\n            console.error(`${operation} failed: ${error.error}`);\r\n\r\n            // Let the app keep running by returning an empty result.\r\n            return of(result as T);\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Connessione a RabbitMQ\r\n     */\r\n    public mqConnect(queueName: string) {\r\n        return this.stompService.subscribe(queueName).pipe(map((msg: Message) => JSON.parse(msg.body)));\r\n    }\r\n\r\n    public mqConnected() {\r\n        return this.stompService.connected();\r\n    }\r\n    public mqDisconnect() {\r\n        return this.stompService.disconnect();\r\n    }\r\n\r\n    // -------------------------------------------------------------------------------------------------------\r\n    // PARTE TBSERVERMONITOR\r\n    // -------------------------------------------------------------------------------------------------------\r\n    public getTBInfosLogs(params: MonitorParams): Observable<TBServerInfo[]> {\r\n        let p = new HttpParams();\r\n\r\n        if (params.accountName) p = p.append('accountName', '' + params.accountName);\r\n        if (params.processName) p = p.append('processName', '' + params.processName);\r\n        if (params.minutes) p = p.append('minute', '' + params.minutes);\r\n\r\n        const httpOptions = { params: p };\r\n\r\n        const url = this.getServerMonitorUrl() + `tbServers/${params.instanceKey}`;\r\n\r\n        return this.http.get<TBServerInfo[]>(url, httpOptions).pipe(catchError(this.handleError('TbLoggerService.getTBInfosLogs', [])));\r\n    }\r\n}\r\n","export enum LogStatus {\r\n    Info = 0,\r\n    Debug = 1,\r\n    Warn = 2,\r\n    Error = 3,\r\n    Fatal = 4\r\n}\r\n","import { Injectable, Inject } from '@angular/core';\r\n\r\nimport { NotificationService } from '@progress/kendo-angular-notification';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class TbNotificationService {\r\n    constructor(private notificationService: NotificationService) {}\r\n\r\n    public show(msg: string, style: any = 'none'): void {\r\n        this.notificationService.show({\r\n            content: msg,\r\n            animation: { type: 'slide', duration: 200 },\r\n            position: { horizontal: 'right', vertical: 'bottom' },\r\n            type: { style: style, icon: true },\r\n            hideAfter: 4000\r\n        });\r\n    }\r\n}\r\n","import { NgModule, ModuleWithProviders, Inject } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { ButtonsModule } from '@progress/kendo-angular-buttons';\r\nimport { DropDownsModule } from '@progress/kendo-angular-dropdowns';\r\nimport { InputsModule } from '@progress/kendo-angular-inputs';\r\nimport { DateInputsModule } from '@progress/kendo-angular-dateinputs';\r\nimport { NotificationModule } from '@progress/kendo-angular-notification';\r\n\r\nimport { StompRService } from '@stomp/ng2-stompjs';\r\n\r\n@NgModule({\r\n    imports: [CommonModule, NotificationModule, ButtonsModule, InputsModule, DateInputsModule, FormsModule, DropDownsModule],\r\n    providers: [StompRService]\r\n})\r\nexport class TbLoggerModule {\r\n    static forRoot(): ModuleWithProviders {\r\n        return {\r\n            ngModule: TbLoggerModule,\r\n            providers: [StompRService]\r\n        };\r\n    }\r\n}\r\n"]}