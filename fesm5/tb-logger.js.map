{"version":3,"file":"tb-logger.js","sources":["ng://@tb/logger/lib/models/entries.model.ts","ng://@tb/logger/lib/models/monitor.model.ts","ng://@tb/logger/lib/models/logger-operation-result.model.ts","ng://@tb/logger/lib/models/log.model.ts","ng://@tb/logger/lib/models/log-status.enum.ts","ng://@tb/logger/lib/services/tb-logger.service.ts","ng://@tb/logger/lib/services/notification.service.ts","ng://@tb/logger/lib/tb-logger.module.ts"],"sourcesContent":["export class EntriesParams {\r\n    instanceKey: string;\r\n    subscriptionKey!: string;\r\n    apps!: string;\r\n    appTypes!: string;\r\n    category!: string;\r\n    howMany!: string;\r\n    offSet!: string;\r\n    levels!: string;\r\n    textToFind!: string;\r\n    useHistory!: string;\r\n    accountName!: string;\r\n    rangeDateStart!: string;\r\n    rangeDateEnd!: string;\r\n\r\n    constructor(instanceKey: string) {\r\n        this.instanceKey = instanceKey;\r\n    }\r\n}\r\n","export class MonitorParams {\r\n    instanceKey: string;\r\n    accountName: string;\r\n    processName: string;\r\n    minutes = '1';\r\n\r\n    constructor(instanceKey: string, accountName: string, processName: string) {\r\n        this.instanceKey = instanceKey;\r\n        this.accountName = accountName;\r\n        this.processName = processName;\r\n    }\r\n}\r\n","export class LoggerOperationResult {\r\n    Result: boolean;\r\n    Message?: string;\r\n    Code?: number;\r\n    Content?: any;\r\n\r\n    constructor(Result: boolean, Message: string) {\r\n        this.Result = Result;\r\n    }\r\n}\r\n\r\nexport interface TBServerInfos {\r\n    tread: TBServerInfo[];\r\n}\r\n\r\nexport interface TBServerInfo {\r\n    DateTime: string;\r\n    ProcessName: string;\r\n    LoginNumber?: number;\r\n    DocumentNumber?: number;\r\n\r\n    DocMetrics?: any[];\r\n    LernelMS?: number;\r\n    LoginInfos?: any[];\r\n    PhisicalMemory?: number;\r\n    UserMS?: number;\r\n    VirtualMemory?: number;\r\n\r\n    threads?: any[];\r\n}\r\n","export interface Log {\r\n    _id: string;\r\n    LogEntry: {\r\n        App: string; // ERP, PAI, MDC, TBF\r\n        RegisteredAppId: string; // instance key\r\n        RegisteredAppType: string; // TBLOADER, NETCORE, NG, PROVISIONING\r\n        Category: string; //\r\n        Module: string;\r\n        SubModule: string;\r\n        Document: string;\r\n        Subscription: string;\r\n        AccountName: string;\r\n        Lifetime: string;\r\n        Operation: string;\r\n        ContextDescription: string;\r\n        Method: string;\r\n        EntryCreated: string;\r\n        Message: string;\r\n        Level: number;\r\n    };\r\n}\r\n","export enum LogStatus {\r\n    Info = 0,\r\n    Debug = 1,\r\n    Warn = 2,\r\n    Error = 3,\r\n    Fatal = 4\r\n}\r\n","import { Injectable, Inject, isDevMode } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\n\r\nimport { Observable, of, BehaviorSubject } from 'rxjs';\r\nimport { catchError, map } from 'rxjs/operators';\r\n\r\nimport { StompRService, StompState } from '@stomp/ng2-stompjs';\r\nimport { Message } from '@stomp/stompjs';\r\n\r\nimport { LoggerOperationResult, TBServerInfo } from '../models/logger-operation-result.model';\r\nimport { EntriesParams } from '../models/entries.model';\r\nimport { MonitorParams } from '../models/monitor.model';\r\nimport { TbLoggerEnvironment } from '../models/logger-environment';\r\n\r\nlet loggerInstance: TbLoggerService;\r\nexport const logger = () => loggerInstance;\r\n\r\nexport interface LogEntry {\r\n    Message: string;\r\n    Registeredappid: string;\r\n    AccountName?: string | null;\r\n    Subscription?: string | null;\r\n    App?: string;\r\n    Category?: string;\r\n    Level: LogLevel;\r\n}\r\n\r\nexport enum LogLevel {\r\n    Trace = 0,\r\n    Debug,\r\n    Warn,\r\n    Error\r\n}\r\n\r\nexport function prepareLog(message: string, logLevel: LogLevel = LogLevel.Debug) {\r\n    const log: LogEntry = {\r\n        Message: message,\r\n        Registeredappid: logger().getAppId(),\r\n        AccountName: localStorage.getItem('_accountname'),\r\n        Subscription: localStorage.getItem('_company'),\r\n        Category: 'Client',\r\n        Level: logLevel\r\n    };\r\n    return log;\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class TbLoggerService {\r\n    loggerUrl: string;\r\n    serverMonitorUrl: string;\r\n    private howMany = 100;\r\n\r\n    mqConnectionState: StompState = StompState.CLOSED;\r\n    mqConnectionStateObservable: BehaviorSubject<number> = new BehaviorSubject(StompState.CLOSED);\r\n\r\n    constructor(@Inject('env') private env: TbLoggerEnvironment, private http: HttpClient, public stompService: StompRService) {\r\n        loggerInstance = this;\r\n        this.loggerUrl = this.env.logger.url;\r\n        this.serverMonitorUrl = this.env.serverMonitor.url;\r\n        if (env.stompConfig) this.mqInit();\r\n    }\r\n\r\n    mqInit() {\r\n        if (this.env.stompConfig) {\r\n            this.stompService.config = this.env.stompConfig;\r\n            this.stompService.initAndConnect();\r\n            this.stompService.state.subscribe((status: StompState) => {\r\n                this.mqConnectionState = status;\r\n                this.mqConnectionStateObservable.next(status);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Ritorna la App Id dell'applicazione frontend che sta loggando,\r\n     * caricata da un file di configurazione caricato dinamicamente (assets/environment.json)\r\n     */\r\n    getAppId() {\r\n        return this.env.logger.appId;\r\n    }\r\n\r\n    /**\r\n     * Ritorna la base url del logger,\r\n     * caricata da un file di configurazione caricato dinamicamente (assets/environment.json)\r\n     */\r\n    getLoggerUrl() {\r\n        return this.loggerUrl ? this.loggerUrl : this.env.logger.url;\r\n    }\r\n\r\n    /**\r\n     * Ritorna la api per inserire log con appId configurato in environment.json\r\n     */\r\n    getLoggerPostUrl() {\r\n        return `${this.getLoggerUrl()}entries/${this.getAppId()}/`;\r\n    }\r\n\r\n    /**\r\n     * M4 Backend URL\r\n     */\r\n    getServerMonitorUrl() {\r\n        return this.serverMonitorUrl ? this.serverMonitorUrl : this.env.serverMonitor.url;\r\n    }\r\n\r\n    private _shouldLog = (logLevel: LogLevel) => logLevel >= this.env.logger.level;\r\n    private _serverLog = (logLevel: LogLevel, message: string) => this._shouldLog(logLevel) && this.sendLog(message, logLevel);\r\n\r\n    private sendLog(message: string, logLevel: LogLevel) {\r\n        this.http\r\n            .post(this.getLoggerPostUrl(), prepareLog(message, logLevel))\r\n            .toPromise()\r\n            .then(__ => {}, err => {});\r\n    }\r\n\r\n    /**\r\n     * @param message\r\n     * @param optionalParams\r\n     */\r\n    log(message?: any): void {\r\n        if (this._shouldLog(LogLevel.Trace)) console.log(`%c${message}`, `color:#3daf67`);\r\n        this._serverLog(LogLevel.Trace, message);\r\n    }\r\n\r\n    /**\r\n     * @param message\r\n     * @param optionalParams\r\n     */\r\n    debug(message?: any): void {\r\n        if (this._shouldLog(LogLevel.Debug)) console.log(`%c${message}`, `color:#0277bd`);\r\n        this._serverLog(LogLevel.Debug, message);\r\n    }\r\n\r\n    /**\r\n     * @param message\r\n     * @param optionalParams\r\n     */\r\n    warn(message?: any): void {\r\n        if (this._shouldLog(LogLevel.Warn)) console.log(`%c${message}`, `color:#FF9633`);\r\n        this._serverLog(LogLevel.Warn, message);\r\n    }\r\n\r\n    /**\r\n     * @param message\r\n     * @param optionalParams\r\n     */\r\n    error(message?: any): void {\r\n        if (this._shouldLog(LogLevel.Error)) console.error(`%c${message}`, `color:red`);\r\n        this._serverLog(LogLevel.Error, message);\r\n    }\r\n\r\n    /**\r\n     * Log per statistiche client (es: usato da login page per tracciare risoluzione schermo)\r\n     *\r\n     * @param message\r\n     * @param optionalParams\r\n     */\r\n    stat(message?: any): void {\r\n        console.log(`%c${message}`, `color:#884EA0`);\r\n        this._serverLog(LogLevel.Trace, message);\r\n    }\r\n\r\n    /**\r\n     * Return logs: LoggerOperationResult\r\n     *\r\n     * @param params: EntriesParams\r\n     */\r\n    public getLogs(params: EntriesParams): Observable<LoggerOperationResult> {\r\n        if (!params.instanceKey) {\r\n            const error = new LoggerOperationResult(false, 'Error - No instanceKey, no party');\r\n            return of(error);\r\n        }\r\n        // console.log('this.getLoggerUrl()', this.getLoggerUrl());\r\n        const url = this.getLoggerUrl() + `entries/${params.instanceKey}`;\r\n\r\n        let p = new HttpParams();\r\n        p = p.append('howMany', '' + this.howMany);\r\n        if (params.accountName) p = p.append('accountName', params.accountName);\r\n        if (params.subscriptionKey) p = p.append('subscription', params.subscriptionKey);\r\n        if (params.category) p = p.append('categories', params.category);\r\n        if (params.apps) p = p.append('apps', params.apps);\r\n        if (params.appTypes) p = p.append('appTypes', params.appTypes);\r\n        if (params.levels) p = p.append('levels', params.levels);\r\n        if (params.rangeDateStart && params.rangeDateEnd) {\r\n            if (params.rangeDateStart === params.rangeDateEnd) p = p.append('date', params.rangeDateStart);\r\n            else p = p.append('date', params.rangeDateStart + ';' + params.rangeDateEnd);\r\n        }\r\n        const httpOptions = {\r\n            params: p\r\n        };\r\n\r\n        return this.http.get<LoggerOperationResult>(url, httpOptions).pipe(\r\n            // tap(op => console.log('TbLoggerService.getLogs', op)),\r\n            catchError(this.handleError('TbLoggerService.getLogs', new LoggerOperationResult(false, 'Error - getLogs')))\r\n        );\r\n    }\r\n\r\n    public getApps(appId: string): Observable<LoggerOperationResult> {\r\n        if (!appId) {\r\n            const error = new LoggerOperationResult(false, 'Error - No appId, no party');\r\n            return of(error);\r\n        }\r\n\r\n        const url = this.getLoggerUrl() + `apps/${appId}`;\r\n\r\n        return this.http.get<LoggerOperationResult>(url).pipe(\r\n            // tap(op => console.log('TbLoggerService.getApps with appId: ', appId, op)),\r\n            catchError(this.handleError('TbLoggerService.getApps', new LoggerOperationResult(false, 'Error - getApps')))\r\n        );\r\n    }\r\n\r\n    public getAppTypes(appId: string): Observable<LoggerOperationResult> {\r\n        if (!appId) {\r\n            const error = new LoggerOperationResult(false, 'Error - No appId, no party');\r\n            return of(error);\r\n        }\r\n\r\n        const url = this.getLoggerUrl() + `appTypes/${appId}`;\r\n\r\n        return this.http.get<LoggerOperationResult>(url).pipe(\r\n            // tap(op => console.log('TbLoggerService.getAppTypes with appId: ', appId, op)),\r\n            catchError(this.handleError('TbLoggerService.getAppTypes', new LoggerOperationResult(false, 'Error - getAppTypes')))\r\n        );\r\n    }\r\n\r\n    public getInstanceKey(): Observable<LoggerOperationResult> {\r\n        const url = this.getLoggerUrl() + `appIds`;\r\n\r\n        return this.http.get<LoggerOperationResult>(url).pipe(\r\n            // tap(op => console.log(url, 'TbLoggerService.getInstanceKey with appId: ', op)),\r\n            catchError(this.handleError('TbLoggerService.getInstanceKey', new LoggerOperationResult(false, 'Error - getInstanceKey')))\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Legge tutte le subscription\r\n     */\r\n    public getSubscriptionKey(): Observable<LoggerOperationResult> {\r\n        const url = this.getLoggerUrl() + `subscriptionKeys`;\r\n\r\n        return this.http.get<LoggerOperationResult>(url).pipe(\r\n            // tap(op => console.log('TbLoggerService.getSubscriptionKey: ', op)),\r\n            catchError(\r\n                this.handleError('TbLoggerService.getSubscriptionKey', new LoggerOperationResult(false, 'Error - getSubscriptionKey'))\r\n            )\r\n        );\r\n    }\r\n\r\n    public getCategories(appId: string): Observable<LoggerOperationResult> {\r\n        if (!appId) {\r\n            const error = new LoggerOperationResult(false, 'Error - No appId, no party');\r\n            return of(error);\r\n        }\r\n\r\n        const url = this.getLoggerUrl() + `categories/${appId}`;\r\n\r\n        return this.http.get<LoggerOperationResult>(url).pipe(\r\n            // tap(op => console.log('TbLoggerService.getCategories with appId: ', appId, op)),\r\n            catchError(this.handleError('TbLoggerService.getCategories', new LoggerOperationResult(false, 'Error -  getCategories')))\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Handle Http operation that failed.\r\n     * Let the app continue.\r\n     * @param operation - name of the operation that failed\r\n     * @param result - optional value to return as the observable result\r\n     */\r\n    public handleError<T>(operation = 'operation', result?: T) {\r\n        return (error: any): Observable<T> => {\r\n            console.error(`${operation} failed: ${error.error}`);\r\n\r\n            // Let the app keep running by returning an empty result.\r\n            return of(result as T);\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Connessione a RabbitMQ\r\n     */\r\n    public mqConnect(queueName: string) {\r\n        return this.stompService.subscribe(queueName).pipe(map((msg: Message) => JSON.parse(msg.body)));\r\n    }\r\n\r\n    public mqConnected() {\r\n        return this.stompService.connected();\r\n    }\r\n    public mqDisconnect() {\r\n        return this.stompService.disconnect();\r\n    }\r\n\r\n    // -------------------------------------------------------------------------------------------------------\r\n    // PARTE TBSERVERMONITOR\r\n    // -------------------------------------------------------------------------------------------------------\r\n    public getTBInfosLogs(params: MonitorParams): Observable<boolean | TBServerInfo[]> {\r\n        let p = new HttpParams();\r\n\r\n        if (params.accountName) p = p.append('accountName', '' + params.accountName);\r\n        if (params.processName) p = p.append('processName', '' + params.processName);\r\n        if (params.minutes) p = p.append('minute', '' + params.minutes);\r\n\r\n        const httpOptions = { params: p };\r\n\r\n        const url = this.getServerMonitorUrl() + `tbServers/${params.instanceKey}`;\r\n\r\n        return this.http.get<TBServerInfo[]>(url, httpOptions).pipe(catchError(this.handleError('TbLoggerService.getTBInfosLogs', false)));\r\n    }\r\n}\r\n","import { Injectable, Inject } from '@angular/core';\r\n\r\nimport { NotificationService } from '@progress/kendo-angular-notification';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class TbNotificationService {\r\n    constructor(private notificationService: NotificationService) {}\r\n\r\n    public show(msg: string, style: any = 'none'): void {\r\n        this.notificationService.show({\r\n            content: msg,\r\n            animation: { type: 'slide', duration: 200 },\r\n            position: { horizontal: 'right', vertical: 'bottom' },\r\n            type: { style: style, icon: true },\r\n            hideAfter: 4000\r\n        });\r\n    }\r\n}\r\n","import { NgModule, ModuleWithProviders, Inject } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { ButtonsModule } from '@progress/kendo-angular-buttons';\r\nimport { DropDownsModule } from '@progress/kendo-angular-dropdowns';\r\nimport { InputsModule } from '@progress/kendo-angular-inputs';\r\nimport { DateInputsModule } from '@progress/kendo-angular-dateinputs';\r\nimport { NotificationModule } from '@progress/kendo-angular-notification';\r\n\r\nimport { StompRService } from '@stomp/ng2-stompjs';\r\n\r\n@NgModule({\r\n    imports: [CommonModule, NotificationModule, ButtonsModule, InputsModule, DateInputsModule, FormsModule, DropDownsModule],\r\n    providers: [StompRService]\r\n})\r\nexport class TbLoggerModule {\r\n    static forRoot(): ModuleWithProviders {\r\n        return {\r\n            ngModule: TbLoggerModule,\r\n            providers: [StompRService]\r\n        };\r\n    }\r\n}\r\n"],"names":[],"mappings":"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"}